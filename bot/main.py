import telebot
from telebot import types
import mysql.connector
from mysql.connector import Error
import hashlib
import os
from dotenv import load_dotenv

load_dotenv()

bot = telebot.TeleBot(os.getenv('TOKEN'))

sessions = {}

db_config = {
    'host': os.getenv('DB_HOST'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'database': os.getenv('DB_NAME')
}


def get_db_connection():
    try:
        return mysql.connector.connect(**db_config)
    except Error as error:
        print(error)
        return None


def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()


@bot.message_handler(commands=['start'])
def start_handler(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–æ–π—Ç–∏', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    bot.send_message(
        message.chat.id,
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ To-Do –±–æ—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=markup
    )


@bot.message_handler(func=lambda m: m.text == '–í–æ–π—Ç–∏')
def login_handler(message):
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:')
    bot.register_next_step_handler(msg, process_username_step)


def process_username_step(message):
    username = message.text
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:')
    bot.register_next_step_handler(msg, process_password_step, username)


def process_password_step(message, username):
    password = message.text
    
    try:
        connection = get_db_connection()
        cursor = connection.cursor(dictionary=True)
        cursor.execute(f'SELECT id, passhash FROM accounts WHERE username = "{username}"')
        user = cursor.fetchone()
        
        if user and user['passhash'] == hash_password(password):
            sessions[message.chat.id] = user['id']
            bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!')
            show_main_menu(message.chat.id)
        else:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
        
    except Error as error:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ')
        print(error)

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


@bot.message_handler(func=lambda m: m.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
def register_handler(message):
    msg = bot.send_message(message.chat.id, '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω:')
    bot.register_next_step_handler(msg, process_reg_username_step)


def process_reg_username_step(message):
    username = message.text
    msg = bot.send_message(message.chat.id, '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:')
    bot.register_next_step_handler(msg, process_reg_password_step, username)


def process_reg_password_step(message, username):
    password = message.text
    
    try:
        connection = get_db_connection()
        cursor = connection.cursor()
        
        cursor.execute(f'INSERT INTO accounts (username, passhash) VALUES ("{username}", "{hash_password(password)}")')

        user_id = cursor.lastrowid
        connection.commit()

        sessions[message.chat.id] = user_id
        bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
        show_main_menu(message.chat.id)

    except Error as error:
        if error.errno == 1062:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        else:
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
            print(error)

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    markup.add('üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏')
    markup.add('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É', 'üñä –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É', '‚ûñ –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
    markup.add('üîê –í—ã–π—Ç–∏')

    bot.send_message(chat_id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markup)


@bot.message_handler(func=lambda m: m.text == 'üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏')
def show_notes(message):
    user_id = sessions.get(message.chat.id)
    if not user_id:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É')
        return
    
    try:
        connection = get_db_connection()
        cursor = connection.cursor(dictionary=True)
        cursor.execute(f'SELECT id, text FROM items WHERE user_id = "{user_id}"')
        notes = cursor.fetchall()
        
        if not notes:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫')
            return
        
        response = "üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
        for note in notes:
            response += f"{note['id']}.\t{note['text']}\n\n"
        
        bot.send_message(message.chat.id, response)

    except Error as error:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫')
        print(error)

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


@bot.message_handler(func=lambda m: m.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
def add_note_start(message):
    user_id = sessions.get(message.chat.id)
    if not user_id:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É')
        return
    
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:')
    bot.register_next_step_handler(msg, add_note_finish, user_id)


def add_note_finish(message, user_id):
    text = message.text
    
    try:
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute(f'INSERT INTO items (user_id, text) VALUES ("{user_id}", "{text}")')
        connection.commit()
        bot.send_message(message.chat.id, '‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')

    except Error as error:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏')
        print(error)

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


@bot.message_handler(func=lambda m: m.text == 'üîê –í—ã–π—Ç–∏')
def logout_handler(message):
    if message.chat.id in sessions:
        del sessions[message.chat.id]
    bot.send_message(message.chat.id, '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
    start_handler(message)


if __name__ == '__main__':
    bot.polling(none_stop=True)
